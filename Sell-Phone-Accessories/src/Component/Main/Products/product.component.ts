import {
  Component,
  ViewEncapsulation,
  HostListener,
  effect,
  signal,
} from '@angular/core';
import { map, catchError, finalize, of } from 'rxjs';
import { ActivatedRoute } from '@angular/router';
import { toSignal } from '@angular/core/rxjs-interop';
import { CommonModule, NgFor } from '@angular/common';
import { RouterLink, Router } from '@angular/router';
import { inject } from '@angular/core';
import { ProductList } from '../../../service/ProductList.service';
import { MatButtonModule } from '@angular/material/button';
import { MatMenuModule } from '@angular/material/menu';
import { MatIconModule } from '@angular/material/icon';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatListModule } from '@angular/material/list';
import { MatExpansionModule } from '@angular/material/expansion';
import { HttpClient, HttpParams } from '@angular/common/http';

import { environment } from '../../../environments/environment.development';

type Product = {
  id: number;
  name: string;
  description: string | null;
  price: number;
  rate: number; // üëà th√™m
  color: string | null;
  quantity: number;
  brand: string | null;
  active: boolean;
  discount: number;
  subSlug: string | null;
  categoryName: string;
  categorySlug: string;
  deviceModelNames: string[];
  deviceModelSlugs: string[];
  coverImageId: number | null;
  coverImageUrl: string | null; // üëà th√™m
  createdAt: string; // BE tr·∫£ ISO string -> ƒë·ªÉ string cho ƒë∆°n gi·∫£n
  updatedAt: string;
};
@Component({
  standalone: true,
  selector: 'product',
  imports: [
    CommonModule,
    NgFor,
    RouterLink,
    MatButtonModule,
    MatMenuModule,
    MatIconModule,
    MatSidenavModule,
    MatListModule,
    MatExpansionModule,
  ],
  templateUrl: './product.component.html',
  styleUrls: ['./product.component.css'],
})
export class Products {
  isFilterOpen = false;
  bus = inject(ProductList); // state b√°o tr·∫°ng th√°i ƒëƒÉng nh·∫≠p ra ngo√†i
  apiBase = environment.apiUrl;
  http = inject(HttpClient);
  loading = signal(false);
  error = signal<string | null>(null);
  items = signal<Product[] | null>(null);

  route = inject(ActivatedRoute);// 
  qp = toSignal(this.route.queryParamMap, { initialValue: new Map() as any });
  filtersOpen = false;

  // ƒê√≥ng panel khi ph√≥ng to l√™n desktop
  @HostListener('window:resize')
  onResize() {
    if (window.innerWidth > 900 && this.filtersOpen) this.filtersOpen = false;
  }

  // ƒê√≥ng b·∫±ng ph√≠m ESC
  @HostListener('document:keydown.escape')
  onEsc() {
    this.filtersOpen = false;
  }

   constructor(private router: Router) {
    effect(() => {
      // ∆Øu ti√™n bus n·∫øu c√≥ (ƒëi t·ª´ trang tr∆∞·ªõc)
      const p = this.bus.payload();
      if (p?.category && p?.model) {
        this.fetch(p.category, p.model);
        return;
      }

      // Reload/ƒëi th·∫≥ng: l·∫•y t·ª´ URL
      const q = this.qp();
      const category = q.get('category');
      const model = q.get('model');

      if (category && model) {
        this.fetch(category, model);
        return;
      }

      // (tu·ª≥ ch·ªçn) Fallback t·ª´ localStorage
      const cached = localStorage.getItem('productFilters');
      if (cached) {
        const { category: c, model: m } = JSON.parse(cached);
        if (c && m) this.fetch(c, m);
      }
    }, { allowSignalWrites: true });
  }

  // Kh√¥ng c·∫ßn constructor n·ªØa

  // Khi nh·∫≠n ƒë∆∞·ª£c payload m·ªõi, nh·ªõ l∆∞u ƒë·ªÉ reload l·∫ßn sau v·∫´n c√≥
  saveFilters(category: string, model: string) {
    this.bus.payload.set({ category, model }); // l∆∞u v√†o bus ƒë·ªÉ l·∫ßn sau kh·ªèi ph·∫£i ƒë·ªçc URL
    localStorage.setItem('productFilters', JSON.stringify({ category, model }));
  }

  // (tu·ª≥ ch·ªçn) N·∫øu model b·∫°n c·∫ßn d·∫°ng slug (iphone-16-pro-max), d√πng h√†m n√†y
  private slugify(s: string) {
    return s
      .toLowerCase()
      .normalize('NFD')
      .replace(/\p{Diacritic}/gu, '') // b·ªè d·∫•u ti·∫øng Vi·ªát
      .replace(/[^a-z0-9\s-]/g, '')
      .trim()
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-');
  }

  private fetch(category: string, model: string) {
    this.loading.set(true);
    this.error.set(null);

    const params = new HttpParams()
      .set('category', category)
      .set('model', model);

    this.http
      .get<any>(`${this.apiBase}/api/products`, { params })
      .pipe(
        map((res: any) => {
          if (Array.isArray(res)) return res; // BE tr·∫£ th·∫≥ng m·∫£ng
          if (Array.isArray(res?.content)) return res.content; // Spring Page
          if (Array.isArray(res?.data)) return res.data; // wrapper data
          if (Array.isArray(res?.items)) return res.items; // wrapper items
          // n·∫øu l·ª° tr·∫£ v·ªÅ object key->product:
          if (res && typeof res === 'object') return Object.values(res);
          return [];
        }),
        catchError((err) => {
          this.error.set(err?.error?.message || 'Load s·∫£n ph·∫©m th·∫•t b·∫°i');
          return of([] as Product[]);
        }),
        finalize(() => this.loading.set(false))
      )
      .subscribe((list) => this.items.set(list));
  }

  goToProductDetail(productId: number) {// th·ª±c hi·ªán ƒëi·ªÅu h∆∞·ªõng 
   
    // ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn productDetail, v√≠ d·ª• truy·ªÅn tham s·ªë s·∫£n ph·∫©m
    this.router.navigate(['/product/productDetail', productId]);
  }
}
