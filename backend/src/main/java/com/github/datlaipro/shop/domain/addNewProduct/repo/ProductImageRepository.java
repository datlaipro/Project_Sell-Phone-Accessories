package com.github.datlaipro.shop.domain.addNewProduct.repo;

import com.github.datlaipro.shop.domain.addNewProduct.entity.ProductImageEntity;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;

// üëá TH√äM C√ÅC IMPORT N√ÄY
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.transaction.annotation.Transactional;

@Repository
public interface ProductImageRepository extends JpaRepository<ProductImageEntity, Long> {

  // L·∫•y danh s√°ch ·∫£nh c·ªßa 1 product theo th·ª© t·ª± sort_order tƒÉng d·∫ßn
  List<ProductImageEntity> findByProduct_IdOrderBySortOrderAsc(Long productId);

  // ƒê·∫øm s·ªë ·∫£nh c·ªßa 1 product
  long countByProduct_Id(Long productId);

  // Xo√° to√†n b·ªô ·∫£nh c·ªßa 1 product (tr·∫£ v·ªÅ s·ªë h√†ng b·ªã xo√°)
  long deleteByProduct_Id(Long productId);

  // Unset cover hi·ªán t·∫°i (n·∫øu c√≥)
  @Modifying(clearAutomatically = true, flushAutomatically = true)
  @Transactional // ho·∫∑c ƒë·ªÉ @Transactional ·ªü Service g·ªçi method n√†y c≈©ng ƒë∆∞·ª£c
  @Query("update ProductImageEntity pi " +
         "set pi.isCover = false " +
         "where pi.product.id = :productId and pi.isCover = true")
  int unsetCoverForProduct(@Param("productId") Long productId);
}
