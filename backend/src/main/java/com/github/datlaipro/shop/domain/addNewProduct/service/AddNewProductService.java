package com.github.datlaipro.shop.domain.addNewProduct.service;

import com.github.datlaipro.shop.domain.addNewProduct.dto.AddNewProductReq;
import com.github.datlaipro.shop.domain.addNewProduct.dto.AddNewProductRes;
import com.github.datlaipro.shop.domain.addNewProduct.entity.AddNewProductEntity;
import com.github.datlaipro.shop.domain.addNewProduct.entity.ProductImageEntity;
import com.github.datlaipro.shop.domain.addNewProduct.repo.AddNewProductRepository;
import com.github.datlaipro.shop.domain.addNewProduct.repo.CategoryRepository;
import com.github.datlaipro.shop.domain.product.entity.DeviceModelEntity;
import com.github.datlaipro.shop.domain.product.repo.DeviceModelRepository;
import com.github.datlaipro.shop.domain.addNewProduct.repo.ProductImageRepository;
import com.github.datlaipro.shop.domain.admin.login.dto.LoginAdminRes;
import com.github.datlaipro.shop.domain.productspec.entity.ProductSpecEntity;
import com.github.datlaipro.shop.domain.productspec.entity.ProductSpecId;
import com.github.datlaipro.shop.domain.productspec.repo.ProductSpecRepository;
import com.github.datlaipro.shop.storage.CloudflareR2Service;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import java.math.BigDecimal;
import java.util.*;
import java.util.Map.Entry;

@Service
public class AddNewProductService {

  private final AddNewProductRepository productRepo;
  private final CategoryRepository categoryRepo;
  private final ProductImageRepository imageRepo;
  private final ProductSpecRepository productSpecRepo; // üëà NEW
  private final DeviceModelRepository deviceModelRepo;
  private final CloudflareR2Service r2;

  public AddNewProductService(AddNewProductRepository productRepo,
      CategoryRepository categoryRepo,
      ProductImageRepository imageRepo,
      ProductSpecRepository productSpecRepo, // üëà NEW
      DeviceModelRepository deviceModelRepo,
      CloudflareR2Service r2) {
    this.productRepo = productRepo;
    this.categoryRepo = categoryRepo;
    this.imageRepo = imageRepo;
    this.deviceModelRepo = deviceModelRepo;
    this.productSpecRepo = productSpecRepo; // üëà NEW
    this.r2 = r2;
  }

  // ===== API c≈© (kh√¥ng c√≥ file) v·∫´n ch·∫°y b√¨nh th∆∞·ªùng =====
  @Transactional
  public AddNewProductRes createProduct(AddNewProductReq req, LoginAdminRes admin) {
    return createProduct(req, admin, null); // g·ªçi overload m·ªõi
  }

  // ===== API m·ªõi: c√≥ th·ªÉ nh·∫≠n nhi·ªÅu file ·∫£nh =====
  @Transactional
  public AddNewProductRes createProduct(AddNewProductReq req,
      LoginAdminRes admin,
      MultipartFile[] files) {
    // 1) Chu·∫©n ho√° & ki·ªÉm tra category theo t√™n
    String catName = Optional.ofNullable(req.getCategory())
        .map(String::trim)
        .filter(s -> !s.isEmpty())
        .orElseThrow(() -> new IllegalArgumentException("Thi·∫øu category"));

    var category = categoryRepo.findByNameIgnoreCase(catName)//
        .orElseThrow(() -> new IllegalArgumentException("Category kh√¥ng t·ªìn t·∫°i: " + catName));

    // 1.1) (NEW) Chu·∫©n ho√° product type (n·∫øu FE g·ª≠i)

    // 2) L∆∞u product
    var p = new AddNewProductEntity();
    p.setName(req.getName());
    p.setPrice(req.getPrice());
    p.setDiscount(Optional.ofNullable(req.getDiscount()).orElse(BigDecimal.ZERO));
    p.setRate(req.getRate() == null ? new BigDecimal("0.00") : req.getRate()); // tr√°nh NULL cho c·ªôt NOT NULL
    p.setColor(req.getColor());
    p.setQuantity(req.getQuantity());
    p.setBrand(req.getBrand());
    p.setCategoryId(category.getId());
    p.setIsActive(true);

    // (NEW) g√°n productTypeId n·∫øu c√≥

    if (admin != null && admin.getId() != null) {
      p.setCreatedByAdminId(admin.getId());
      p.setUpdatedByAdminId(admin.getId()); // l·∫ßn t·∫°o ƒë·∫ßu ti√™n: updated = created
    }

    var saved = productRepo.save(p);

    List<String> slugs = Optional.ofNullable(req.getModelSlugs())
        .orElse(Collections.emptyList());

    // n·∫øu c·∫ßn b·ªè kho·∫£ng tr·∫Øng + lowercase:
    List<String> slugsLower = new ArrayList<>();
    for (String s : slugs) {
      if (s != null) {
        String t = s.trim().toLowerCase();
        if (!t.isEmpty())
          slugsLower.add(t);
      }
    }

    // üëâ Quan tr·ªçng: ghi r√µ ki·ªÉu List<DeviceModelEntity>
    List<DeviceModelEntity> models = deviceModelRepo.findBySlugInIgnoreCase(slugsLower);

    for (DeviceModelEntity m : models) {
      // g·ªçi method link ·ªü repo ph√π h·ª£p (xem B∆∞·ªõc 2)
      productRepo.linkDevice(saved.getId(), m.getId());// l∆∞u v√†o b·∫£ng li√™n k·∫øt product_device_fit
    }

    // 3) Upload ·∫£nh l√™n R2 (n·∫øu c√≥), r·ªìi l∆∞u v√†o product_images
    List<String> urls = new ArrayList<>();
    try {
      if (files != null && files.length > 0) {
        urls = r2.uploadMany(files, "product");
      }
    } catch (Exception e) {
      throw new IllegalArgumentException("Upload ·∫£nh th·∫•t b·∫°i: " + e.getMessage(), e);
    }

    if (!urls.isEmpty()) {
      int coverIdx = Optional.ofNullable(req.getCoverIndex()).orElse(0);
      if (coverIdx < 0 || coverIdx >= urls.size())
        coverIdx = 0;

      int order = 1; // cover = 0, c√≤n l·∫°i 1,2,3...
      for (int i = 0; i < urls.size(); i++) {
        String url = urls.get(i);
        if (url == null || url.isBlank())
          continue;

        var img = new ProductImageEntity();
        img.setProduct(saved);
        img.setImageUrl(url.trim());

        boolean isCover = (i == coverIdx);
        img.setIsCover(isCover);
        img.setSortOrder(isCover ? 0 : order++);

        imageRepo.save(img);
      }
    }

    // 4) (NEW) L∆∞u specs m·ªÅm d·∫ªo v√†o product_specs
    Map<String, String> specs = new LinkedHashMap<>(// kh·ªüi t·∫°o LinkedHashMap ƒë·ªÉ gi·ªØ th·ª© t·ª± nh·∫≠p
        Optional.ofNullable(req.getSpecs()).orElse(Collections.emptyMap()));

    // C·∫ßu n·ªëi: n·∫øu FE v·∫´n g·ª≠i description ri√™ng, d·ªìn v√†o specs v·ªõi key
    // "Description"
    String desc = Optional.ofNullable(req.getDescription())
        .map(String::trim).filter(s -> !s.isEmpty()).orElse(null);
    if (desc != null) {
      specs.put("Description", desc);
    }

    if (!specs.isEmpty()) {
      for (Entry<String, String> e : specs.entrySet()) {// L·∫∑p qua t·ª´ng c·∫∑p attr ‚Üí val trong Map<String, String>.
        String attr = normalizeAttr(e.getKey()); // Chu·∫©n ho√° t√™n thu·ªôc t√≠nh (v√≠ d·ª• gom ‚Äúdescription‚Äù, ‚ÄúDescription‚Äù,
                                                 // ‚ÄúDESCRIPTION‚Äù v·ªÅ c√πng m·ªôt d·∫°ng ‚ÄúDescription‚Äù, c·∫Øt kho·∫£ng tr·∫Øng, gi·ªõi
                                                 // h·∫°n ƒë·ªô d√†i, v.v.) ƒë·ªÉ tr√°nh tr√πng/lo·∫°n key.
        String val = sanitizeVal(e.getValue()); // ‚Üì c·∫≠p nh·∫≠t b·ªè c·∫Øt 500
        if (attr == null || val == null)
          continue;

        var pk = new ProductSpecId(saved.getId(), attr);
        var specEntity = new ProductSpecEntity(pk, val);
        productSpecRepo.save(specEntity); // upsert theo PK k√©p (product_id, attr)
      }
    }

    // 5) Tr·∫£ DTO
    return toRes(saved, category.getName());
  }

  private AddNewProductRes toRes(AddNewProductEntity e, String categoryName) {
    var res = new AddNewProductRes();
    res.setId(e.getId());
    res.setName(e.getName());
    res.setPrice(e.getPrice());
    res.setRate(e.getRate());
    res.setColor(e.getColor());
    res.setQuantity(e.getQuantity());
    res.setBrand(e.getBrand());

    res.setCategoryId(e.getCategoryId());
    res.setCategoryName(categoryName);
    res.setIsActive(e.getIsActive());
    res.setCreatedAt(e.getCreatedAt());
    res.setUpdatedAt(e.getUpdatedAt());

    // n·∫øu entity c√≥ c√°c field n√†y:
    res.setCreatedByAdminId(e.getCreatedByAdminId());
    res.setUpdatedByAdminId(e.getUpdatedByAdminId());
    return res;
  }

  // --- helpers nh·ªè ƒë·ªÉ an to√†n ƒë·ªô d√†i/blank ---
  private String sanitizeAttr(String raw) {
    if (raw == null)
      return null;
    String s = raw.trim();
    if (s.isEmpty())
      return null;
    // kh·ªõp @Column(length=100) b·∫°n ƒë√£ ƒë·ªãnh nghƒ©a cho attr
    return s.length() > 100 ? s.substring(0, 100) : s;
  }

  private String sanitizeVal(String raw) {
    if (raw == null)
      return null;
    String s = raw.trim();
    return s.isEmpty() ? null : s; // KH√îNG c·∫Øt ƒë·ªô d√†i ·ªü ƒë√¢y
  }

  private String normalizeAttr(String raw) {
    if (raw == null)
      return null;
    String s = raw.trim();
    if (s.isEmpty())
      return null;
    if (s.equalsIgnoreCase("description"))
      return "Description"; // th·ªëng nh·∫•t
    return s.length() > 100 ? s.substring(0, 100) : s; // gi·ªØ gi·ªõi h·∫°n attr
  }

}
